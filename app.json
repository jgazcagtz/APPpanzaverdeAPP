import React, { useState } from 'react';
import {
  View,
  Text,
  Image,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Modal,
  Button,
  Alert,
  FlatList,
  SafeAreaView,
  Linking,
} from 'react-native';
import { WebView } from 'react-native-webview';

const products = [
  { name: 'Aderezo Panza Verde (500ml)', img: 'https://i.imgur.com/YDjR9QQ.png', price: 55, includes: 'Especial para pizzas, hamburguesas, sushi, milanesas, alitas. etc.', category: 'Otros' },
  { name: 'Ate de fruta', img: 'https://i.imgur.com/Yk8a3AC.jpeg', price: 70, includes: 'Membrillo (350g aprox)', category: 'Dulces' },
  { name: 'Alfajor argentino', img: 'https://i.imgur.com/7zoiYN8.png', price: 50, includes: 'Hecho con dulce de leche autÃ©ntico', category: 'Dulces' },
  { name: 'Almendras cubiertas de cocoa (100g)', img: 'https://i.imgur.com/LznPjo4.jpeg', price: 55, includes: '', category: 'Dulces' },
  { name: 'Almendras cubiertas de Matcha (100g)', img: 'https://i.imgur.com/WDPDcq1.jpeg', price: 55, includes: 'con chocolate blanco', category: 'Dulces' },
  { name: 'ArÃ¡ndanos enchilados (100g)', img: 'https://i.imgur.com/pLKUISA.jpeg', price: 35, includes: 'ArÃ¡ndanos deshidratados con chile', category: 'Dulces picositos' },
  { name: 'Arrayanes (230g)', img: 'https://i.imgur.com/PQNiYFI.jpeg', price: 50, includes: 'Arrayanes con azÃºcar', category: 'Dulces' },
  { name: 'Botana Gourmet enchilada (100g)', img: 'https://i.imgur.com/Yo5R1in.jpeg', price: 55, includes: 'Mezcla de nueces enchiladas', category: 'Botanas' },
  { name: 'Botana Gourmet salada (100g)', img: 'https://i.imgur.com/jhlGdSc.jpeg', price: 55, includes: 'Mezcla de nueces', category: 'Botanas' },
  { name: 'Botana Panza Verde (300g)', img: 'https://i.imgur.com/Sp53Fq9.jpeg', price: 120, includes: 'Nuez de la india, pretzels, arÃ¡ndanos enchilados', category: 'Botanas' },
  { name: 'Churritos de amaranto (500g)', img: 'https://i.imgur.com/sLaUnO7.jpeg', price: 80, includes: 'Nopal, limÃ³n y sal o chipotle', category: 'Botanas' },
  { name: 'DÃ¡tiles rellenos de nuez (100g)', img: 'https://i.imgur.com/EBqMxqr.jpeg', price: 45, includes: 'DÃ¡tiles rellenos de nuez cubiertos con un toque de azÃºcar', category: 'Dulces' },
  { name: 'Fresas Deshidratadas (100g)', img: 'https://i.imgur.com/0SK8MuI.jpeg', price: 50, includes: '', category: 'Dulces' },
  { name: 'Gomitas (250g)', img: 'https://i.imgur.com/twEv15D.png', price: 45, includes: 'Hierbas, frutos, SandÃ­a c/chile, Mango c/chile', category: 'Dulces' },
  { name: 'Gomitas de corazÃ³n (100g)', img: 'https://i.imgur.com/CAtOzlA.jpeg', price: 20, includes: 'Hechas con amor', category: 'Dulces' },
  { name: 'Gomitas de frutas con chile (100g)', img: 'https://i.imgur.com/HN5cFUm.jpeg', price: 20, includes: '', category: 'Dulces picositos' },
  { name: 'Granos de cafÃ© cubiertos de chocolate semi amargo (100g)', img: 'https://i.imgur.com/ODAIYHh.jpeg', price: 45, includes: '', category: 'Dulces' },
  { name: 'Guayabate con nuez o piÃ±Ã³n (330g aprox.)', img: 'https://i.imgur.com/jrJlWHl.jpeg', price: 85, includes: 'Dulce de guayaba con cajeta, coco y nuez o piÃ±Ã³n', category: 'Dulces' },
  { name: 'Macadamias cubiertas de cocoa (100g)', img: 'https://i.imgur.com/jehZ5Bu.jpeg', price: 60, includes: '', category: 'Dulces' },
  { name: 'Mangomitas cubiertas de chile (100g)', img: 'https://i.imgur.com/6mljk5L.png', price: 20, includes: '', category: 'Dulces picositos' },
  { name: 'Mangos enchilados (100g)', img: 'https://i.imgur.com/jLK6q3R.png', price: 45, includes: '', category: 'Dulces picositos' },
  { name: 'Nuez de la india enchilada (100g)', img: 'https://i.imgur.com/5kbXrDR.png', price: 55, includes: '', category: 'Botanas' },
  { name: 'Nuez de la india salada (100g)', img: 'https://i.imgur.com/N49fDtW.jpeg', price: 50, includes: '', category: 'Botanas' },
  { name: 'Palomas (50g aprox.)', img: 'https://i.imgur.com/wpgUaGP.jpeg', price: 25, includes: 'Obleas rellenas de coco y cajeta', category: 'Dulces' },
  { name: 'PiÃ±as con chile (100g)', img: 'https://i.imgur.com/gRCANyj.jpeg', price: 45, includes: '', category: 'Dulces picositos' },
  { name: 'Pistaches enchilados (100g)', img: 'https://i.imgur.com/FxIyawD.png', price: 55, includes: 'Con ajo', category: 'Botanas' },
  { name: 'Queso de Almendras (40g aprox) ', img: 'https://i.imgur.com/CuhnSD3.jpeg', price: 25, includes: 'Dulce fino de Almendra con un toque de limÃ³n', category: 'Dulces' },
  { name: 'Suspiros (50g)', img: 'https://i.imgur.com/6uZUzF8.jpeg', price: 20, includes: 'Galletas pequeÃ±as cubiertas de chocolate semi amargo', category: 'Dulces' },
  { name: 'Suaves de coco (300g)', img: 'https://i.imgur.com/CtURNmF.jpeg', price: 80, includes: '', category: 'Dulces' },
  { name: 'Tarugos rellenos de panditas o picafresas (100g)', img: 'https://i.imgur.com/QlbwTrr.jpeg', price: 20, includes: '', category: 'Dulces picositos' },
  { name: 'Vasitos con pulpa de fruta y chile (230g)', img: 'https://i.imgur.com/iXCpNDz.jpeg', price: 45, includes: '', category: 'Dulces picositos' }
];

export default function App() {
  const [cart, setCart] = useState([]);
  const [modalVisible, setModalVisible] = useState(false);
  const [categoryModalVisible, setCategoryModalVisible] = useState(false);
  const [webViewVisible, setWebViewVisible] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState('All');
  const [filteredProducts, setFilteredProducts] = useState(products);

  const categories = ['All', 'Dulces', 'Dulces picositos', 'Botanas', 'Otros'];

  const addToCart = (product) => {
    const existingProduct = cart.find((item) => item.name === product.name);
    if (existingProduct) {
      existingProduct.quantity += 1;
      setCart([...cart]);
    } else {
      setCart([...cart, { ...product, quantity: 1 }]);
    }
    Alert.alert('Cart', `${product.name} has been added to your cart.`);
  };

  const toggleModal = () => {
    setModalVisible(!modalVisible);
  };

  const toggleCategoryModal = () => {
    setCategoryModalVisible(!categoryModalVisible);
  };

  const calculateTotal = () => {
    return cart.reduce((total, item) => total + item.price * item.quantity, 0).toFixed(2);
  };

  const filterProducts = (category) => {
    setSelectedCategory(category);
    if (category === 'All') {
      setFilteredProducts(products);
    } else {
      setFilteredProducts(products.filter((product) => product.category === category));
    }
    toggleCategoryModal();  // Close the modal after selecting a category
  };

  const handlePayment = () => {
    setWebViewVisible(true);
  };

  const totalAmount = calculateTotal();
  const itemDescription = cart.map((item) => `${item.name} x ${item.quantity}`).join(', ');

  const paypalUrl = `https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&business=erandi27gasca@gmail.com&currency_code=MXN&amount=${totalAmount}&item_name=${encodeURIComponent(itemDescription)}`;

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView>
        <Header />
        <IntroSection />
        <CategoryFilter selectedCategory={selectedCategory} onOpenCategoryModal={toggleCategoryModal} />
        <View style={styles.productList}>
          {filteredProducts.map((product, index) => (
            <ProductItem key={index} product={product} onAddToCart={() => addToCart(product)} />
          ))}
        </View>
      </ScrollView>
      <CartButton onPress={toggleModal} />
      <CartModal
        visible={modalVisible}
        onClose={toggleModal}
        cartItems={cart}
        total={calculateTotal()}
        onCheckout={handlePayment}
      />
      <CategorySelectionModal
        visible={categoryModalVisible}
        onClose={toggleCategoryModal}
        categories={categories}
        onSelectCategory={filterProducts}
      />
      <PaymentWebView
        visible={webViewVisible}
        onClose={() => setWebViewVisible(false)}
        url={paypalUrl}
      />
    </SafeAreaView>
  );
}

const Header = () => (
  <View style={styles.header}>
    <Image source={{ uri: 'https://i.imgur.com/yQ3EUIR.png' }} style={styles.logo} />
    <Text style={styles.title}>Panza Verde</Text>
    <Text style={styles.subtitle}>Sabor y TradiciÃ³n</Text>
  </View>
);

const IntroSection = () => (
  <View style={styles.introSection}>
    <Text style={styles.introText}>Â¡Bienvenidos!</Text>
    <Text style={styles.introText}>Disfruta de nuestra deliciosa selecciÃ³n de dulces artesanales y botanas.</Text>
    <Text style={styles.introText}>Cada bocado es un viaje por sabores Ãºnicos...</Text>
    <Text style={styles.introText}>Â¡Descubre nuestro catÃ¡logo y dÃ©jate sorprender por cada sabor!</Text>
  </View>
);

const CategoryFilter = ({ selectedCategory, onOpenCategoryModal }) => (
  <View style={styles.filterContainer}>
    <Text style={styles.filterLabel}>Filter by Category: {selectedCategory}</Text>
    <Button title="Select Category" onPress={onOpenCategoryModal} />
  </View>
);

const ProductItem = ({ product, onAddToCart }) => (
  <View style={styles.productItem}>
    <Image source={{ uri: product.img }} style={styles.productImage} />
    <View style={styles.productContent}>
      <Text style={styles.productName}>{product.name}</Text>
      <Text style={styles.productPrice}>${product.price.toFixed(2)}</Text>
      <Text style={styles.productIncludes}>{product.includes}</Text>
      <Button title="Elegir" onPress={onAddToCart} />
    </View>
  </View>
);

const CartButton = ({ onPress }) => (
  <TouchableOpacity style={styles.cartButton} onPress={onPress}>
    <Text style={styles.cartButtonText}>ðŸ›’</Text>
  </TouchableOpacity>
);

const CartModal = ({ visible, onClose, cartItems, total, onCheckout }) => (
  <Modal visible={visible} animationType="slide">
    <View style={styles.modalContainer}>
      <View style={styles.modalHeader}>
        <Text style={styles.modalTitle}>ðŸ›’ Carrito</Text>
        <Button title="Cerrar" onPress={onClose} />
      </View>
      <FlatList
        data={cartItems}
        keyExtractor={(item, index) => index.toString()}
        renderItem={({ item }) => (
          <Text style={styles.cartItem}>
            {item.name} - ${item.price.toFixed(2)} x {item.quantity}
          </Text>
        )}
      />
      <Text style={styles.totalText}>Total: ${total}</Text>
      <Button title="Checkout with PayPal" onPress={onCheckout} />
    </View>
  </Modal>
);

const CategorySelectionModal = ({ visible, onClose, categories, onSelectCategory }) => (
  <Modal visible={visible} animationType="slide">
    <View style={styles.modalContainer}>
      <View style={styles.modalHeader}>
        <Text style={styles.modalTitle}>Select Category</Text>
        <Button title="Close" onPress={onClose} />
      </View>
      {categories.map((category, index) => (
        <Button
          key={index}
          title={category}
          onPress={() => onSelectCategory(category)}
        />
      ))}
    </View>
  </Modal>
);

const PaymentWebView = ({ visible, onClose, url }) => (
  <Modal visible={visible} animationType="slide">
    <WebView
      source={{ uri: url }}
      onNavigationStateChange={(event) => {
        if (event.url.includes('success')) {
          onClose();
          Alert.alert('Success', 'Payment Successful!');
        } else if (event.url.includes('cancel')) {
          onClose();
          Alert.alert('Cancelled', 'Payment Cancelled.');
        }
      }}
    />
    <Button title="Close" onPress={onClose} />
  </Modal>
);

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f2f2f2',
  },
  header: {
    alignItems: 'center',
    padding: 20,
    backgroundColor: '#ffffff',
    borderBottomWidth: 2,
    borderBottomColor: '#34a853',
    shadowColor: 'rgba(0, 0, 0, 0.1)',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.8,
    shadowRadius: 2,
    elevation: 1,
  },
  logo: {
    width: 100,
    height: 100,
    borderRadius: 50,
  },
  title: {
    fontSize: 24,
    fontWeight: '700',
    color: 'green',
  },
  subtitle: {
    fontSize: 16,
    color: 'green',
  },
  introSection: {
    padding: 20,
    textAlign: 'center',
    backgroundColor: '#34a853',
    borderRadius: 12,
    margin: 20,
    shadowColor: 'rgba(0, 0, 0, 0.15)',
    shadowOffset: { width: 0, height: 8 },
    shadowOpacity: 0.8,
    shadowRadius: 16,
    elevation: 1,
  },
  introText: {
    fontSize: 16,
    fontWeight: '700',
    color: '#ffffff',
    marginVertical: 5,
  },
  productList: {
    padding: 20,
  },
  filterContainer: {
    marginHorizontal: 20,
    marginBottom: 10,
  },
  filterLabel: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  productItem: {
    flexDirection: 'row',
    backgroundColor: '#ffffff',
    padding: 15,
    borderRadius: 10,
    marginBottom: 15,
    shadowColor: 'rgba(0, 0, 0, 0.1)',
    shadowOffset: { width: 0, height: 6 },
    shadowOpacity: 0.8,
    shadowRadius: 12,
    elevation: 1,
  },
  productImage: {
    width: 100,
    height: 100,
    borderRadius: 10,
    marginRight: 20,
  },
  productContent: {
    flex: 1,
  },
  productName: {
    fontSize: 18,
    fontWeight: '700',
    color: '#333',
  },
  productPrice: {
    fontSize: 16,
    color: 'green',
    marginVertical: 5,
  },
  productIncludes: {
    fontSize: 14,
    color: '#555',
  },
  cartButton: {
    position: 'absolute',
    bottom: 30,
    right: 20,
    backgroundColor: '#ffdd00',
    width: 50,
    height: 50,
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: 'rgba(0, 0, 0, 0.15)',
    shadowOffset: { width: 0, height: 8 },
    shadowOpacity: 0.8,
    shadowRadius: 16,
    elevation: 1,
  },
  cartButtonText: {
    fontSize: 24,
    color: '#ffffff',
  },
  modalContainer: {
    flex: 1,
    padding: 20,
    backgroundColor: '#ffffff',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  modalTitle: {
    fontSize: 24,
    fontWeight: '700',
    color: '#333',
  },
  cartItem: {
    fontSize: 16,
    color: '#333',
    marginBottom: 10,
  },
  totalText: {
    fontSize: 18,
    fontWeight: '700',
    color: 'green',
    marginVertical: 20,
  },
});

